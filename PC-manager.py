import telebot
import os
import subprocess
import time
import webbrowser
import numpy as np
from PIL import Image
from io import BytesIO
import platform
import natsort
import tempfile
import cv2
import pyautogui


BOT_TOKEN = ""
ALLOWED_USER_IDS = []
PASSWORD = "@dresny"
AUTHORIZED_USERS = {}

SCREENSHOT_PATH = "1.png"  # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
FILE_TRANSFER_FOLDER = r""  # –ü–∞–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ñ–∞–π–ª–æ–≤ (–∏–∑ –±–æ—Ç–∞ –Ω–∞ –ü–ö)
FILE_SEND_FOLDER = r""  # –ü–∞–ø–∫–∞ –æ—Ç–∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã
EXE_FILE_PATH = None
MAX_FILE_SIZE_MB = 42 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ (–≤ MB)
bot = telebot.TeleBot(BOT_TOKEN)

def take_screenshot():
    try:
        image = pyautogui.screenshot()
        image.save(SCREENSHOT_PATH)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        return False

def shutdown_pc():
    """–í—ã–∫–ª—é—á–∞–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä."""
    try:
        os.system("shutdown /s /t 1")  # Windows
        # subprocess.run(["shutdown", "-h", "now"]) #Linux
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –ü–ö: {e}")
        return False

def display_message(message):
    try:
        import tkinter as tk
        import threading

        def show_message():
            root = tk.Tk()
            root.title("dildogram")
            label = tk.Label(root, text=message, padx=20, pady=10)
            label.pack()

            def close_window():
                root.destroy()
            root.after(5000, close_window)
            root.mainloop()

        thread = threading.Thread(target=show_message)
        thread.start()

        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False

def open_link(url):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ."""
    try:
        webbrowser.open(url)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        return False

def run_file(file_path):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–∞–π–ª."""
    try:
        if platform.system() == 'Windows':
            os.startfile(file_path)  # Windows
        else:
            subprocess.Popen(['xdg-open', file_path])  # Linux/macOS
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return False

def display_image(image_data):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –Ω–∞ 5 —Å–µ–∫—É–Ω–¥."""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º PIL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img = Image.open(BytesIO(image_data))

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º pyautogui –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_image_path = "temp_image.png"
        img.save(temp_image_path)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º tkinter –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        import tkinter as tk
        from PIL import ImageTk

        root = tk.Tk()
        root.title("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

        img = ImageTk.PhotoImage(Image.open(temp_image_path))
        panel = tk.Label(root, image=img)
        panel.pack(side="bottom", fill="both", expand="yes")
        def close_window():
            root.destroy()

        root.after(5000, close_window)

        root.mainloop()

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_image_path)

        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return False

def record_screen(duration):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥."""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–∏—Å–∏
        screen_size = pyautogui.size()
        fourcc = cv2.VideoWriter_fourcc(*"mp4v")  # –ö–æ–¥–µ–∫–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ
        fps = 20.0  # –ö–∞–¥—Ä—ã –≤ —Å–µ–∫—É–Ω–¥—É

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
        output_file = tempfile.NamedTemporaryFile(suffix=".mp4", delete=False)
        output_path = output_file.name
        output_file.close()

        out = cv2.VideoWriter(output_path, fourcc, fps, screen_size)

        start_time = time.time()
        while time.time() - start_time < duration:
            img = pyautogui.screenshot()
            frame = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
            out.write(frame)

        out.release()
        cv2.destroyAllWindows()

        return output_path  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —ç–∫—Ä–∞–Ω–∞: {e}")
        return None

def execute_command(command):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ utf-8
        try:
            stdout = stdout.decode('utf-8')
        except UnicodeDecodeError:
            stdout = stdout.decode('cp866') #–ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ

        try:
            stderr = stderr.decode('utf-8')
        except UnicodeDecodeError:
            stderr = stderr.decode('cp866')

        if stderr:
            return f"‚ùå –û—à–∏–±–∫–∞:\n{stderr}"
        return f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{stdout}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}"

MAIN_MENU_KEYBOARD = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
MAIN_MENU_KEYBOARD.add(
    "‚öôÔ∏è –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö",
    "üì¢ –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è",
    "üñ•Ô∏è –¢–µ—Ä–º–∏–Ω–∞–ª", #–î–æ–±–∞–≤–∏–ª–∏ –∫–Ω–æ–ø–∫—É —Ç–µ—Ä–º–∏–Ω–∞–ª
    "üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    "üîô –ù–∞–∑–∞–¥"
)

CATEGORIES_KEYBOARD = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
CATEGORIES_KEYBOARD.add(
    "üñ•Ô∏è –≠–∫—Ä–∞–Ω",
    "üì§ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
    "üì• –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö",
    "üîô –ù–∞–∑–∞–¥"
)

SCREEN_KEYBOARD = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
SCREEN_KEYBOARD.add(
    "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞",
    "üñºÔ∏è –í—ã–≤–µ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    "‚è∫Ô∏è –ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞",
    "üîô –ù–∞–∑–∞–¥"
)

GET_DATA_KEYBOARD = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
GET_DATA_KEYBOARD.add(
    "üóÇÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å –ü–ö",
    "üîô –ù–∞–∑–∞–¥"
)

INPUT_DATA_KEYBOARD = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
INPUT_DATA_KEYBOARD.add(
    "üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É",
    "üíæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –ü–ö",
    "‚å®Ô∏è –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç",
    "üîô –ù–∞–∑–∞–¥"
)

STATE_MAIN_MENU = "main_menu"
STATE_CATEGORIES = "categories"
STATE_SCREEN = "screen"
STATE_GET_DATA = "get_data"
STATE_INPUT_DATA = "input_data"
STATE_RECORD_SCREEN = "record_screen"
STATE_SEND_FILE_BROWSE = "send_file_browse"
STATE_INPUT_TEXT = "input_text"
STATE_TERMINAL = "terminal"
USER_STATES = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_FILE_PATHS = {} # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id

    if user_id in ALLOWED_USER_IDS:
        bot.send_message(user_id, "üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º:")
        bot.register_next_step_handler(message, process_password)
    else:
        bot.send_message(user_id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")

def process_password(message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º."""
    user_id = message.from_user.id
    password = message.text

    if password == PASSWORD:
        AUTHORIZED_USERS[user_id] = True
        USER_STATES[user_id] = STATE_MAIN_MENU
        show_main_menu(message)
    else:
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ /start")

def show_main_menu(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_id = message.from_user.id
    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        USER_STATES[user_id] = STATE_MAIN_MENU
        msg = bot.send_message(user_id, "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=MAIN_MENU_KEYBOARD)
        delete_message(user_id, message.message_id)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

def show_categories_menu(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    user_id = message.from_user.id
    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        USER_STATES[user_id] = STATE_CATEGORIES
        msg = bot.send_message(user_id, "üóÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=CATEGORIES_KEYBOARD)
        delete_message(user_id, message.message_id)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

def show_screen_menu(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —ç–∫—Ä–∞–Ω–∞."""
    user_id = message.from_user.id
    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        USER_STATES[user_id] = STATE_SCREEN
        msg = bot.send_message(user_id, "üñ•Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=SCREEN_KEYBOARD)
        delete_message(user_id, message.message_id)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

def show_get_data_menu(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
    user_id = message.from_user.id
    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        USER_STATES[user_id] = STATE_GET_DATA
        msg = bot.send_message(user_id, "üì§ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=GET_DATA_KEYBOARD)
        delete_message(user_id, message.message_id)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

def show_input_data_menu(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö."""
    user_id = message.from_user.id
    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        USER_STATES[user_id] = STATE_INPUT_DATA
        msg = bot.send_message(user_id, "üì• –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=INPUT_DATA_KEYBOARD)
        delete_message(user_id, message.message_id)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

def delete_message(user_id, message_id):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    try:
        bot.delete_message(user_id, message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

@bot.message_handler(func=lambda message: message.text == "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞")
def handle_screenshot(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞."""
    user_id = message.from_user.id

    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        bot.send_chat_action(user_id, 'upload_photo')
        if take_screenshot():
            with open(SCREENSHOT_PATH, 'rb') as photo:
                bot.send_photo(user_id, photo)
        else:
            bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.")
        delete_message(user_id, message.message_id)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö")
def handle_shutdown(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö."""
    user_id = message.from_user.id

    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        bot.send_message(user_id, "üò¥ –í—ã–∫–ª—é—á–∞—é –ü–ö...")
        if shutdown_pc():
            bot.send_message(user_id, "‚úÖ –ü–ö –≤—ã–∫–ª—é—á–µ–Ω.")
        else:
            bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å –ü–ö.")
        delete_message(user_id, message.message_id)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

@bot.message_handler(func=lambda message: message.text == "üì¢ –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è")
def handle_display_message(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω."""
    user_id = message.from_user.id

    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        bot.send_message(user_id, "üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ:")
        bot.register_next_step_handler(message, process_display_message)
        delete_message(user_id, message.message_id)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

def process_display_message(message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω –ü–ö."""
    user_id = message.from_user.id
    text = message.text

    if display_message(text):
        bot.send_message(user_id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ.")
    else:
        bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    delete_message(user_id, message.message_id)

@bot.message_handler(func=lambda message: message.text == "üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É")
def handle_open_link(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–∫–∏."""
    user_id = message.from_user.id

    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        bot.send_message(user_id, "üåê –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:")
        bot.register_next_step_handler(message, process_open_link)
        delete_message(user_id, message.message_id)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

def process_open_link(message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –Ω–∞ –ü–ö."""
    user_id = message.from_user.id
    url = message.text

    if open_link(url):
        bot.send_message(user_id, "‚úÖ –°—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.")
    else:
        bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É.")

    delete_message(user_id, message.message_id)

@bot.message_handler(func=lambda message: message.text == "üíæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –ü–ö")
def handle_upload_file(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞ –Ω–∞ –ü–ö –∏ –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è."""
    user_id = message.from_user.id

    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        # –°–æ–∑–¥–∞–µ–º Inline Keyboard –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
        markup = telebot.types.InlineKeyboardMarkup()
        item1 = telebot.types.InlineKeyboardButton(text="1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data="upload_file")
        item2 = telebot.types.InlineKeyboardButton(text="2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª", callback_data="upload_and_run_file")
        markup.add(item1, item2)
        bot.send_message(user_id, "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        delete_message(user_id, message.message_id)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

@bot.callback_query_handler(func=lambda call: call.data in ["upload_file", "upload_and_run_file"])
def process_upload_choice(call):
    user_id = call.from_user.id
    action = call.data

    bot.send_message(user_id, "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –ü–ö:")
    bot.register_next_step_handler(call.message, process_upload_file, action)
    delete_message(user_id, call.message.message_id) #–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞

def process_upload_file(message, action):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–∞–π–ª –Ω–∞ –ü–ö –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–≥–æ."""
    user_id = message.from_user.id
    if message.document:
        try:
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            file_name = message.document.file_name
            file_path = os.path.join(FILE_TRANSFER_FOLDER, file_name)

            with open(file_path, 'wb') as new_file:
                new_file.write(downloaded_file)

            bot.send_message(user_id, f"‚úÖ –§–∞–π–ª '{file_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ –ü–ö.")

            if action == "upload_and_run_file":
                if run_file(file_path):
                    bot.send_message(user_id, "üöÄ –§–∞–π–ª –∑–∞–ø—É—â–µ–Ω.")
                else:
                    bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª.")
                delete_message(user_id, message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
            else:
                delete_message(user_id, message.message_id)  #–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –Ω–∞–¥–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ñ–∞–π–ª

        except Exception as e:
            bot.send_message(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
            delete_message(user_id, message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    else:
        bot.send_message(user_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.")
        delete_message(user_id, message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º

@bot.message_handler(func=lambda message: message.text == "üñºÔ∏è –í—ã–≤–µ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", content_types=['photo'])
def handle_display_photo_request(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–í—ã–≤–µ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"."""
    user_id = message.from_user.id

    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        bot.send_message(user_id, "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        bot.register_next_step_handler(message, process_display_photo)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –æ–∂–∏–¥–∞–Ω–∏—é —Ñ–æ—Ç–æ
        delete_message(user_id, message.message_id)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

@bot.message_handler(content_types=['photo'])  # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
def process_display_photo(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –µ–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ."""
    user_id = message.from_user.id

    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            file_id = message.photo[-1].file_id
            file_info = bot.get_file(file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            if display_image(downloaded_file):
                bot.send_message(user_id, "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –Ω–∞ 5 —Å–µ–∫—É–Ω–¥.")
            else:
                bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        except Exception as e:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

    delete_message(user_id, message.message_id)

# === –ù–û–í–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ ===
@bot.message_handler(func=lambda message: message.text == "‚è∫Ô∏è –ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞")
def handle_record_screen(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞."""
    user_id = message.from_user.id

    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        bot.send_message(user_id, "‚è≥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ —ç–∫—Ä–∞–Ω–∞:")
        bot.register_next_step_handler(message, process_record_duration)
        delete_message(user_id, message.message_id)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

def process_record_duration(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏ —ç–∫—Ä–∞–Ω–∞."""
    user_id = message.from_user.id
    try:
        duration = int(message.text)
        if duration <= 0:
            bot.send_message(user_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥.")
            delete_message(user_id, message.message_id)
            return

        bot.send_chat_action(user_id, 'record_video')  #–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ
        video_path = record_screen(duration)

        if video_path:
            with open(video_path, 'rb') as video:
                bot.send_video(user_id, video)
            os.remove(video_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            bot.send_message(user_id, "‚úÖ –ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        else:
            bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —ç–∫—Ä–∞–Ω.")

        delete_message(user_id, message.message_id)

    except ValueError:
        bot.send_message(user_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥.")
        delete_message(user_id, message.message_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤
def browse_files(user_id, path):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø—É—Ç–∏."""
    try:
        files = os.listdir(path)
        files = natsort.natsorted(files)  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞–∫ –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ Windows

        markup = telebot.types.InlineKeyboardMarkup()
        for file in files:
            file_path = os.path.join(path, file)
            relative_path = os.path.relpath(file_path, FILE_SEND_FOLDER)
            file_size_mb = os.path.getsize(file_path) / (1024 * 1024)

            if os.path.isfile(file_path):
                if file_size_mb <= MAX_FILE_SIZE_MB:
                    button_text = f"üìÑ {file} ({file_size_mb:.2f} MB)"
                    callback_data = f"sendfile:{relative_path}"
                else:
                    button_text = f"üìÑ {file} (–†–∞–∑–º–µ—Ä > {MAX_FILE_SIZE_MB} MB)"
                    callback_data = "ignore"
            elif os.path.isdir(file_path):
                button_text = f"üìÇ {file}"
                callback_data = f"browse:{relative_path}"
            else:
                continue

            if callback_data == "ignore":
                markup.add(telebot.types.InlineKeyboardButton(text=button_text, callback_data="ignore"))
            else:
                markup.add(telebot.types.InlineKeyboardButton(text=button_text, callback_data=callback_data))

        if path != FILE_SEND_FOLDER:
            parent_dir = os.path.dirname(path)
            relative_parent_dir = os.path.relpath(parent_dir, FILE_SEND_FOLDER)
            markup.add(telebot.types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"browse:{relative_parent_dir}"))

        bot.send_message(user_id, f"üóÇÔ∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏: {path}", reply_markup=markup)

    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ñ–∞–π–ª–æ–≤: {e}")

@bot.message_handler(func=lambda message: message.text == "üóÇÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å –ü–ö")
def handle_send_file(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞ —Å –ü–ö."""
    user_id = message.from_user.id

    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        USER_STATES[user_id] = STATE_SEND_FILE_BROWSE  # –°—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤
        USER_FILE_PATHS[user_id] = FILE_SEND_FOLDER  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        browse_files(user_id, FILE_SEND_FOLDER)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤ –±–æ—Ç–µ
        delete_message(user_id, message.message_id)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

@bot.callback_query_handler(func=lambda call: call.data.startswith("browse:"))
def callback_browse_files(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –ø–∞–ø–∫–∞–º."""
    user_id = call.from_user.id
    relative_path = call.data.split(":")[1]
    path = os.path.join(FILE_SEND_FOLDER, relative_path).replace("\\","/")  # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
    if os.path.isdir(path):
        USER_FILE_PATHS[user_id] = path
        browse_files(user_id, path)
    else:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–∞–ø–∫–∞!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("sendfile:"))
def callback_send_file(call):
    user_id = call.from_user.id
    relative_path = call.data.split(":")[1]
    file_path = os.path.join(FILE_SEND_FOLDER, relative_path).replace("\\","/")  # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å

    try:
        file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
        if file_size_mb <= MAX_FILE_SIZE_MB:
            with open(file_path, 'rb') as file:
                bot.send_document(user_id, file)
            bot.send_message(user_id, "‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        else:
             bot.send_message(user_id, f"‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç {MAX_FILE_SIZE_MB} MB.")
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}")

#–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(func=lambda message: message.text == "‚å®Ô∏è –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç")
def handle_input_text(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞."""
    user_id = message.from_user.id

    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        bot.send_message(user_id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:")
        USER_STATES[user_id] = STATE_INPUT_TEXT
        bot.register_next_step_handler(message, process_input_text)
        delete_message(user_id, message.message_id)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

def process_input_text(message):
    user_id = message.from_user.id
    text = message.text

    try:
        pyautogui.typewrite(text)
        bot.send_message(user_id, "‚úÖ –¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω.")
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç: {e}")

    USER_STATES[user_id] = STATE_INPUT_DATA
    delete_message(user_id, message.message_id)

@bot.message_handler(func=lambda message: message.text == "üñ•Ô∏è –¢–µ—Ä–º–∏–Ω–∞–ª")
def handle_terminal(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞."""
    user_id = message.from_user.id

    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        bot.send_message(user_id, "üíª –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):", parse_mode="Markdown")
        USER_STATES[user_id] = STATE_TERMINAL
        delete_message(user_id, message.message_id)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

@bot.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == STATE_TERMINAL)
def process_terminal_command(message):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ."""
    user_id = message.from_user.id
    command = message.text

    if command.lower() == "exit":
        USER_STATES[user_id] = STATE_MAIN_MENU
        bot.send_message(user_id, "‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞.", reply_markup=MAIN_MENU_KEYBOARD)
    else:
        result = execute_command(command)
        bot.send_message(user_id, f"üíª –ö–æ–º–∞–Ω–¥–∞: `{command}`\n{result}", parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == "üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
def handle_categories(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    user_id = message.from_user.id
    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        show_categories_menu(message)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

@bot.message_handler(func=lambda message: message.text == "üñ•Ô∏è –≠–∫—Ä–∞–Ω")
def handle_screen(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –º–µ–Ω—é —ç–∫—Ä–∞–Ω–∞."""
    user_id = message.from_user.id
    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        show_screen_menu(message)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

@bot.message_handler(func=lambda message: message.text == "üì§ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
def handle_get_data(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –º–µ–Ω—é –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
    user_id = message.from_user.id
    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        show_get_data_menu(message)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

@bot.message_handler(func=lambda message: message.text == "üì• –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
def handle_input_data(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –º–µ–Ω—é –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö."""
    user_id = message.from_user.id
    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        show_input_data_menu(message)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
def handle_back(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"."""
    user_id = message.from_user.id
    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        current_state = USER_STATES.get(user_id)

        if current_state == STATE_CATEGORIES or current_state == STATE_MAIN_MENU:
            show_main_menu(message)
        elif current_state == STATE_GET_DATA or current_state == STATE_INPUT_DATA or current_state == STATE_SCREEN:
            show_categories_menu(message)
        elif current_state == STATE_SEND_FILE_BROWSE:  #–ï—Å–ª–∏ –≤ —Ñ–∞–π–ª–æ–≤–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ
            show_get_data_menu(message)
        elif current_state == STATE_TERMINAL: #–ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
            show_main_menu(message)
        else:
            show_main_menu(message)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    user_id = message.from_user.id
    if user_id in AUTHORIZED_USERS and AUTHORIZED_USERS[user_id]:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.  –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")
        delete_message(user_id, message.message_id)
    else:
        bot.send_message(user_id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å /start")


if __name__ == '__main__':
    print("–†–∞–±–æ—Ç–∞–µ–º...")
    bot.infinity_polling()
